export const inspectObject = (o) => {
    return [
        { fn: (obj) => obj, args: o },
        { fn: (obj) => obj(), args: o },
        { fn: (obj) => new obj(), args: o },
        { fn: (obj) => typeof obj, args: o },
        { fn: (obj) => obj.__proto__, args: o },
        { fn: (obj) => obj.prototype, args: o },
        { fn: (obj) => Object.entries(obj), args: o },
        { fn: (obj) => Object.getOwnPropertyDescriptors(obj), args: o },
        { fn: (obj) => Object.getOwnPropertyNames(obj), args: o },
        { fn: (obj) => Object.getOwnPropertySymbols(obj), args: o },
        { fn: (obj) => Object.getPrototypeOf(obj), args: o },
        { fn: (obj) => Object.is(obj, obj), args: o },
        { fn: (obj) => Object.is(obj, undefined), args: o },
        { fn: (obj) => Object.isExtensible(obj), args: o },
        { fn: (obj) => Object.isFrozen(obj), args: o },
        { fn: (obj) => Object.isSealed(obj), args: o },
        { fn: (obj) => Object.keys(obj), args: o },
        { fn: (obj) => Object.values(obj), args: o },
        { fn: (obj) => [...obj], args: o },
        { fn: (obj) => ({...obj}), args: o },
        { fn: (obj) => Array.from(obj), args: o },
        { fn: (obj) => Array.isArray(obj), args: o },
        { fn: (obj) => Array.of(obj), args: o },
        { fn: (obj) => JSON.stringify(obj), args: o },
        { fn: (obj) => structuredClone(obj), args: o },
        { fn: (obj) => +obj, args: o },
        { fn: (obj) => "" + obj, args: o },
        { fn: (obj) => obj + "", args: o },
        { fn: (obj) => obj.toString, args: o },
        { fn: (obj) => obj.toString(), args: o },
        { fn: (obj) => Number.isFinite(obj), args: o },
        { fn: (obj) => Number.isInteger(obj), args: o },
        { fn: (obj) => Number.isNaN(obj), args: o },
        { fn: (obj) => Number.isSafeInteger(obj), args: o },
        { fn: (obj) => Number.parseFloat(obj), args: o },
        { fn: (obj) => Number.parseInt(obj), args: o },
        { fn: (obj) => isFinite(obj), args: o },
        { fn: (obj) => isNaN(obj), args: o },
        { fn: (obj) => parseFloat(obj), args: o },
        { fn: (obj) => parseInt(obj), args: o },
        { fn: (obj) => obj === obj, args: o },
        { fn: (obj) => obj !== obj, args: o },
        { fn: (obj) => obj == obj, args: o },
        { fn: (obj) => obj != obj, args: o },
    ];
};

export const inspectProperty = (args) => {
    return [
        { fn: (obj, prop) => Object.getOwnPropertyDescriptor(obj, prop), args },
    ];
};
